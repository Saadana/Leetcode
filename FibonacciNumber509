~~~~~C++ solution :-
class Solution {
public:
    int fib(int n) {
        if(n <= 1) {
            return n;
        }
        int Fibonacci[n+1];
        Fibonacci[0] = 0;
        Fibonacci[1] = 1;
        
        for(int i = 2; i <= n; i++) {
            Fibonacci[i] = Fibonacci[i-1] + Fibonacci[i-2];
        }
        return Fibonacci[n];
    }
};

~~~~~JAVA solution :-
class Solution {
    public int fib(int n) {
        if(n <= 1) {
            return n;
        }
        int Fibonacci[] = new int[n+1];
        Fibonacci[0] = 0;
        Fibonacci[1] = 1;
        
        for(int i = 2; i <= n; i++) {
            Fibonacci[i] = Fibonacci[i-1] + Fibonacci[i-2];
        }
        return Fibonacci[n];        
    }
}

-------------------------------------------------------
#####C++ Solution #1
class Solution {
public:
    int fib(int n) {
        if(n <= 1)   return n;
        int Fib[n];
        memset(Fib, -1, sizeof(Fib));
        if(Fib[n-1] == -1)
            Fib[n-1] = fib(n-1);
        if(Fib[n-2] == -1)
            Fib[n-2] = fib(n-2);
        return (Fib[n-1] + Fib[n-2]);
    }
};

#####C++ Solution #2
class Solution {
public:
    int fib(int n) {
        if(n <= 1)   return n;
        return (fib(n-1) + fib(n-2));
    }
};

#####C++ Solution #3
class Solution {
public:
    int fib(int n) {
        if(n < 2)   return n;
        int Fib[n+1];
        Fib[0] = 0; Fib[1] = 1;
        for(int i = 2; i <= n; i++)
            Fib[i] = Fib[i-1] + Fib[i-2];
        return Fib[n];
    }
};
