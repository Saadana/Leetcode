#####C++ Solution #1
class Solution {
public:
    bool kLengthApart(vector<int>& nums, int k) {
        int dist = 1;
        int len = nums.size();
        for(int i = 0; i < len; i++) {
            dist = 1;
            if(nums[i]) {
                while((dist <= k) && ((i+1) < len)) {
                    if(nums[++i])    return false;
                    dist++;
                }
            }
        }
        return true;
    }
};

#####C++ Solution #2
class Solution {
public:
    bool kLengthApart(vector<int>& nums, int k) {
        int dist = k;   //if 1 is the first element
        for(auto i : nums) {
            if(i) {
                if(dist < k)    return false;
                dist = 0;
            }
            else 
                dist++;
        }
        return true;
    }
};


#####C++ Solution #3
class Solution {
public:
    bool kLengthApart(vector<int>& nums, int k) {
        int min = INT_MAX;
        int pos1 = -1;
        int pos2 = -1;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] && (pos1 == -1)) 
                pos1 = i;
            else {
                if(nums[i] && (pos1 != -1)) {
                    pos2 = pos1;
                    pos1 = i;
                    if(abs(pos2-pos1) < min)
                        min = abs(pos2-pos1);
                }
            }
        }
        if(min > k) return true;
        return false;
    }
};
